name: SonarCloud analysis

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  GO_VERSION: '1.22'
  GOLINTERS_VERSION: 1.59.1
  GOLINTERS_ARCH: linux-amd64
  GOLINTERS_TGZ_DGST: c30696f1292cff8778a495400745f0f9c0406a3f38d8bb12cef48d599f6c7791
  GOLINTERS_TIMEOUT: 15m
  OPENSSL_DGST_CMD: openssl dgst -sha256 -r
  CURL_CMD: curl --proto =https --tlsv1.2 --location --silent --show-error --fail
  
permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  #v4.1.7
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7  #v5.0.1
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Run unit Tests
        run: |
          go test -coverprofile=./cov.out ./...

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-no-fail -fmt=sonarqube -out report.json ./..."

      - name: Install golangci-lint
        run: |
          GOLINTERS_URL_PREFIX="https://github.com/golangci/golangci-lint/releases/download/v${GOLINTERS_VERSION}/"
          GOLINTERS_TGZ="golangci-lint-${GOLINTERS_VERSION}-${GOLINTERS_ARCH}.tar.gz"
          GOLINTERS_EXPECTED_DGST="${GOLINTERS_TGZ_DGST} *${GOLINTERS_TGZ}"
          DGST_CMD="${OPENSSL_DGST_CMD} ${GOLINTERS_TGZ}"

          cd $(mktemp -d /tmp/golinters.XXXXX)
          ${CURL_CMD} "${GOLINTERS_URL_PREFIX}${GOLINTERS_TGZ}" --output ${GOLINTERS_TGZ}

          GOLINTERS_GOT_DGST=$(${DGST_CMD})
          if [ "${GOLINTERS_GOT_DGST}" != "${GOLINTERS_EXPECTED_DGST}" ]
          then
            echo "Digest of tarball is not equal to expected digest."
            echo "Expected digest: " "${GOLINTERS_EXPECTED_DGST}"
            echo "Got digest:      " "${GOLINTERS_GOT_DGST}"
            exit 1
          fi

          tar --no-same-owner -xzf "${GOLINTERS_TGZ}" --strip-components 1
          install golangci-lint $(go env GOPATH)/bin
          $(go env GOPATH)/bin/golangci-lint run --out-format checkstyle > report.xml
        shell: bash

      #- name: Run golangci-lint
       # run: $(go env GOPATH)/bin/golangci-lint run --out-format checkstyle > report.xml
        #shell: bash

      - name: Analyze with SonarCloud
        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.3.0
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args: >
            -Dsonar.exclusions=**/*_test.go
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.go.coverage.reportPaths=cov.out
            -Dsonar.externalIssuesReportPaths=report.json
            -Dsonar.go.golangci-lint.reportPaths=report.xml
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
         # projectBaseDir: .
